{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","props","handleChange","event","target","value","name","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randImg","url","randomImage","topText","bottomText","bind","fetch","then","response","json","memes","data","onSubmit","this","className","onChange","type","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8LAWeA,MAVf,WACE,OACM,gCACK,yBACIC,IAAI,iEACJC,IAAI,aACJ,gD,0CCmDFC,E,kDAtDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAsBRC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBC,EADe,EACfA,MAAOC,EADQ,EACRA,KACd,EAAKC,SAAL,eAAgBD,EAAOD,KAzBT,EA4BlBG,aAAe,SAACL,GACVA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAU,EAAKH,MAAMC,YAAYL,GAASQ,IAChD,EAAKX,SAAS,CACZY,YAAaF,KA/BnB,EAAKH,MAAQ,CACXM,QAAS,GACTC,WAAY,GACZF,YAAa,gCACbJ,YAAa,IAEf,EAAKb,aAAe,EAAKA,aAAaoB,KAAlB,gBACpB,EAAKd,aAAe,EAAKA,aAAac,KAAlB,gBATJ,E,gEAWE,IAAD,OAEjBC,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACVE,EAASF,EAASG,KAAlBD,MACP,EAAKpB,SAAS,CACZQ,YAAaY,S,+BAoBrB,OACE,6BACK,0BAAME,SAAUC,KAAKtB,aAAcuB,UAAU,aAC1C,2BAAOC,SAAUF,KAAK5B,aAAc+B,KAAK,OAAO5B,MAAOyB,KAAKhB,MAAMM,QAASd,KAAM,UAAU4B,YAAY,aACvG,2BAAOF,SAAUF,KAAK5B,aAAc+B,KAAK,OAAO5B,MAAOyB,KAAKhB,MAAMO,WAAYf,KAAM,aAAa4B,YAAY,gBAC7G,wCAEJ,yBAAKH,UAAU,QACN,yBAAKjC,IAAKgC,KAAKhB,MAAMK,YAAapB,IAAI,cACtC,wBAAIgC,UAAU,OAAOD,KAAKhB,MAAMM,SAChC,wBAAIW,UAAU,UAAUD,KAAKhB,MAAMO,kB,GAjD1Bc,aCWbC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ae14a41e.chunk.js","sourcesContent":["import React from 'react';\nfunction Header() {\n  return(\n        <header>\n             <img\n                 src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n                 alt=\"Problem?\" />\n                 <h1>Meme Generator</h1>\n         </header>\n  )\n}\nexport default Header;\n","import React, {Component} from 'react';\n\n\nclass MemeGenerator extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      topText: '',\n      bottomText: '',\n      randomImage: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount(){\n\n    fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(response => {\n          const {memes} = response.data\n          this.setState({\n            allMemeImgs: memes\n          })\n        })\n  }\n\n  handleChange = (event) => {\n      const {value, name} = event.target\n      this.setState({[name]: value})\n  }\n\n  handleSubmit = (event) => {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randImg = this.state.allMemeImgs[randNum].url\n        this.setState({\n          randomImage: randImg\n        })\n    }\n\n  render() {\n    return(\n      <div>\n           <form onSubmit={this.handleSubmit} className=\"meme-form\">\n              <input onChange={this.handleChange} type='text' value={this.state.topText} name ='topText' placeholder='Top Text' />\n              <input onChange={this.handleChange} type='text' value={this.state.bottomText} name ='bottomText' placeholder='Bottom Text' />\n              <button>Gen</button>\n          </form>\n          <div className=\"meme\">\n                   <img src={this.state.randomImage} alt=\"randomImg\" />\n                   <h2 className=\"top\">{this.state.topText}</h2>\n                   <h2 className=\"bottom\">{this.state.bottomText}</h2>\n               </div>\n      </div>\n    )\n  }\n}\nexport default MemeGenerator;\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport MemeGenerator from './Components/MemeGenerator';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <MemeGenerator />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}